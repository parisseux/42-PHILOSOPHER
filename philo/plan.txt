--------------------------------------------------------------------
                             PHIlOSOPHER 
--------------------------------------------------------------------

------------------
GERER LES ERREURS
------------------
- minium un philo et max
- temps positif et max 1 minute
- 4 ou 5 arguments (nombre de philo, temps de mort, temps de repas,
temps de sommeil, nbr de repas max par repas)

cas:

1 philo: prend une fourchette --> meurt car ne peut aps manger avec une fourchette


2 philos: philo 1 prend deux fourchettes et mange, philo 2 pense et puis vice versa

+ de 2 ophilo: nmomnre impaire commence a mangee

!!!! si philo ne mange pas alors il pense. 


apres manger chaque philo dort... et puis pense si il ne peut pas manger


monitor:
- temps d'attente entre repas d;passe temps limite?
- est ce qu-un philo est mort?
- est ce que tous les philos ont assez manger?


routine:
1. manger --> il faut 2 fourchettes
2. dormir --> compteur de temps
3. penser

chaque philo (=thread)
- un Id
- une fourchette a droite
- une fourchette a gauche
- un philo a droite
- un philo a gauche
- temps depuis dernier repas
- nbr de repas mange

Chaque fourchette
- un Id
- un philo a droite
- un philo a gauche
- un etat (mutex): loch ou unloxk?

Monitor:
- est ce qu'un philo est mort de faim?
- est ce que tous les philos sont pleins?


Thread Per Philosopher
One Thread per Philosopher:

Each philosopher is represented by a thread.
The philosopherâ€™s behavior is implemented in the routine function.
All threads run concurrently.
Thread Function (Routine):

The routine defines what a philosopher does:
Think
Try to pick up forks
Eat
Sleep
The routine will typically loop until a termination condition is met (e.g., a stop flag).
Thread Lifecycle:

Threads are created at the start of the simulation.
Threads execute the routine function.
Threads are joined when the simulation ends, ensuring proper cleanup.



PLANNING
--> cree mes tread 
--> induire une routine meme random au debur
--> inclure temps

    --------------------------------
   | TOUT CE QUE J'AI MALLOC/INITIER |
    --------------------------------
- start_mutex
- stop_mutex
- print_mutex
        ------------------- check_input
- malloc forks
- mutex_forks x n_philo
        ------------------- set_up forks
- malloc philo 
- count meal mutex
- last meal mutex
        --------------------set_up philo
- malloc philo_threads
        --------------------set_up threads
- philo threads x n_philo
- monitor thread
        --------------------create_threads


